alias gll="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
alias gc='git checkout'
alias gst='git status --ignore-submodules'
alias gb='git branch'

function git_info() {

    if [ -n "$(git symbolic-ref HEAD 2> /dev/null)" ]; then
        # print informations
        echo "git repo overview"
        echo "-----------------"
        echo

        # print all remotes and thier details
        for remote in $(git remote show); do
            echo $remote:
            git remote show $remote
            echo
        done

        # print status of working repo
        echo "status:"
        if [ -n "$(git status -s 2> /dev/null)" ]; then
            git status -s
        else
            echo "working directory is clean"
        fi

        # print at least 5 last log entries
        echo 
        echo "log:"
        git log -5 --oneline
        echo 

    else
        echo "you're currently not in a git repository"

    fi
}

GIT_THEME_PROMPT_DIRTY='*'

#complex construct to have colors properly. I know...

#hash a string into an useful color
hash_color() {
  echo $(($(cksum<<<"$*"|cut -f1 -d' ')%210+22))
}

#get the branch name and dirty state
git_prompt_info () 
{ 
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return;
    echo -e "(${ref#refs/heads/}$(git_remote_dist)$(parse_git_dirty))"
}

#is branch dirty?
function parse_git_dirty {
  if [[ -n "$(git status --porcelain --ignore-submodules 2> /dev/null)" ]]; then                                                                                    
      echo -e "$GIT_THEME_PROMPT_DIRTY"
  else
    echo -e "$GIT_THEME_PROMPT_CLEAN"
  fi
}

#distance to remote commit
git_remote_dist() {
    local dist=$(git branch -v | sed -n 's/\* '$(git symbolic-ref HEAD | cut -d/ -f3)' [^[]*\[\([^]]*\)\].*/\1/p' | sed 's/ahead /+/;s/behind /-/')
    [[ "$dist" ]] && echo "[${dist}]"
}

git_ps() {
    if [[ "$_GIT_PS" ]]; then
        [[ "$1" == "on" ]] && return
        PS1="$_GIT_PS"
        unset _GIT_PS
        echo git prompt: off
    else
        [[ "$1" == "off" ]] && return
        _GIT_PS="$PS1"
        PS1="${PS1%\\$ } \[\033[1;38;5;232;48;5;\$(hash_color \$(git symbolic-ref HEAD 2> /dev/null)|| echo 0)m\]\$(git_prompt_info)\[\033[0m\] \$ "
        #PS1="${PS1%\\$ } \[\033[38;5;228m\]\$(git_prompt_info)\[\033[00m\]\$ "
        echo git prompt: on
    fi
}
#turn git prompt on by default
git_ps on >/dev/null
